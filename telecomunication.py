# -*- coding: utf-8 -*-
"""TELECOMUNICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tgf1MIgbmoR8RAo3vL-5qzG3SCcsxoEl
"""

import pandas as pd
import numpy as np
import seaborn as svs
import matplotlib.pyplot as plt
from google.colab import files
files.upload()

tele=pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn (1).csv")
tele

tele.isnull().sum()

tele.head()

print("Shape of dataset:",tele.shape)
print("\nColumn names:\n",tele.columns)

svs.countplot(x="Churn",data=tele)
plt.title("Churn Distribution")
plt.show()

"""Above 5000 plus peoples discontinued the telecommunication service. only 2000 less peoples are continuing the service."""

print("\nNumerical summary:\n", tele.describe())
svs.histplot(tele["tenure"], bins=30, kde=True)
plt.title("Distribution of Customer Tenure")
plt.show()

"""Most of the users are preffering only the monthlycharges. the users are youngsters and elder peoples the senior citizens are very less.the price of yearly plan is high so the peoples are mostly preffering the monthlycharges.

"""

svs.boxplot(x="Churn",y="tenure", data=tele)
plt.title("Tenure vs Churn")
plt.show()

"""In the tenure vs churn the service continuing peoples are less. Many peoples are reffer 15 to 60 month time period to stay. in the leaving peoples count have some outlier."""

svs.boxplot(x="Churn",y="MonthlyCharges",data=tele)
plt.title("Monthly Charges vs Churn")
plt.show()

"""In the monthlycharges vs churn most peoples are using above 20 to 100 time periods. these peoples are continuing the service provided by tele. The"""

svs.boxplot(x="Churn",y="TotalCharges",data=tele)
plt.title("Total Charges vs Churn")
plt.show()

svs.boxplot(x=tele['MonthlyCharges'])
plt.title("Outliers in MonthlyCharges")
plt.show()

categorical_cols = [
    "gender", "SeniorCitizen", "Partner", "Dependents",
    "PhoneService", "MultipleLines", "InternetService",
    "OnlineSecurity", "OnlineBackup", "DeviceProtection",
    "TechSupport", "StreamingTV", "StreamingMovies",
    "Contract", "PaperlessBilling", "PaymentMethod"
]
for col in categorical_cols:
    plt.figure(figsize=(6,4))
    svs.countplot(x=col,hue="Churn",data=tele)
    plt.title(f"{col} vs Churn")
    plt.xticks(rotation=30)
    plt.show()

tele["Churn_num"] = tele["Churn"].map({"No":0, "Yes":1})

tele["TotalCharges"] = pd.to_numeric(tele["TotalCharges"], errors='coerce')
tele.dropna(inplace=True)
corr=tele[["tenure","MonthlyCharges","TotalCharges","Churn_num"]].corr()
svs.heatmap(corr,annot=True,cmap="coolwarm",fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

print("\nChurn rate: ",tele['Churn'].value_counts(normalize=True)*100)
print("\nAverage tenure of churned vs non-churned:")
print(tele.groupby("Churn")["tenure"].mean())
print("\nAverage monthly charges of churned vs non-churned:")
print(tele.groupby("Churn")["MonthlyCharges"].mean())

TC=pd.DataFrame(tele)
Q1=TC["tenure"].quantile(0.25)
Q3=TC["tenure"].quantile(0.75)
IQR=Q3-Q1
lower_bound=Q1-1.5
upper_bound=Q3+1.5
tele_clean=tele[(tele["tenure"]>=lower_bound)&(tele["tenure"]<=upper_bound)]

print(tele_clean)

svs.boxplot(tele["TotalCharges"])

svs.boxplot(tele["MonthlyCharges"])

svs.boxplot(tele["tenure"])

svs.boxplot(tele["SeniorCitizen"])

from sklearn.preprocessing import LabelEncoder

# Example: Label Encoding the 'Contract' column

from sklearn.preprocessing import LabelEncoder

# Create label encoder object
le = LabelEncoder()

# Fit and transform the column
tele['Contract_encoded'] = le.fit_transform(tele['Contract'])

# Check results
print(tele[['Contract', 'Contract_encoded']].head())
print("\nMapping of classes:", dict(zip(le.classes_, le.transform(le.classes_))))

df = pd.get_dummies(tele, columns=['Contract'],dtype='int')
print(df.head())

le=LabelEncoder()
tele['gender']=le.fit_transform(tele['gender'])
tele['Partner']=le.fit_transform(tele['Partner'])
tele['Dependents']=le.fit_transform(tele['Dependents'])
tele['PhoneService']=le.fit_transform(tele['PhoneService'])
tele['MultipleLines']=le.fit_transform(tele['MultipleLines'])
tele['InternetService']=le.fit_transform(tele['InternetService'])
tele['OnlineSecurity']=le.fit_transform(tele['OnlineSecurity'])
tele['PaperlessBilling']=le.fit_transform(tele['PaperlessBilling'])
tele['PaymentMethod']=le.fit_transform(tele['PaymentMethod'])
tele['Churn']=le.fit_transform(tele['Churn'])
tele['Contract']=le.fit_transform(tele['Contract'])
tele['StreamingTV']=le.fit_transform(tele['StreamingTV'])
tele['StreamingMovies']=le.fit_transform(tele['StreamingMovies'])
tele

